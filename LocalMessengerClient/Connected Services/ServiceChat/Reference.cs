//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LocalMessengerClient.ServiceChat {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceChat.IServiceChat", CallbackContract=typeof(LocalMessengerClient.ServiceChat.IServiceChatCallback))]
    public interface IServiceChat {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/Connect", ReplyAction="http://tempuri.org/IServiceChat/ConnectResponse")]
        void Connect(int id, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/Connect", ReplyAction="http://tempuri.org/IServiceChat/ConnectResponse")]
        System.Threading.Tasks.Task ConnectAsync(int id, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/Disconnect", ReplyAction="http://tempuri.org/IServiceChat/DisconnectResponse")]
        void Disconnect(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/Disconnect", ReplyAction="http://tempuri.org/IServiceChat/DisconnectResponse")]
        System.Threading.Tasks.Task DisconnectAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/ListName", ReplyAction="http://tempuri.org/IServiceChat/ListNameResponse")]
        string[] ListName();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/ListName", ReplyAction="http://tempuri.org/IServiceChat/ListNameResponse")]
        System.Threading.Tasks.Task<string[]> ListNameAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceChat/SendMsg")]
        void SendMsg(byte[] encryptedData, int id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceChat/SendMsg")]
        System.Threading.Tasks.Task SendMsgAsync(byte[] encryptedData, int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/Authentication", ReplyAction="http://tempuri.org/IServiceChat/AuthenticationResponse")]
        int Authentication(string name, byte[] encryptedPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/Authentication", ReplyAction="http://tempuri.org/IServiceChat/AuthenticationResponse")]
        System.Threading.Tasks.Task<int> AuthenticationAsync(string name, byte[] encryptedPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/OldMessege", ReplyAction="http://tempuri.org/IServiceChat/OldMessegeResponse")]
        byte[][] OldMessege();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/OldMessege", ReplyAction="http://tempuri.org/IServiceChat/OldMessegeResponse")]
        System.Threading.Tasks.Task<byte[][]> OldMessegeAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/GetPublicKey", ReplyAction="http://tempuri.org/IServiceChat/GetPublicKeyResponse")]
        byte[] GetPublicKey();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/GetPublicKey", ReplyAction="http://tempuri.org/IServiceChat/GetPublicKeyResponse")]
        System.Threading.Tasks.Task<byte[]> GetPublicKeyAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/GetPrivateKey", ReplyAction="http://tempuri.org/IServiceChat/GetPrivateKeyResponse")]
        byte[] GetPrivateKey();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/GetPrivateKey", ReplyAction="http://tempuri.org/IServiceChat/GetPrivateKeyResponse")]
        System.Threading.Tasks.Task<byte[]> GetPrivateKeyAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChatCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceChat/MsgCallback")]
        void MsgCallback(byte[] encryptedData);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceChat/ListUsersOnline")]
        void ListUsersOnline(string[] list);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChatChannel : LocalMessengerClient.ServiceChat.IServiceChat, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceChatClient : System.ServiceModel.DuplexClientBase<LocalMessengerClient.ServiceChat.IServiceChat>, LocalMessengerClient.ServiceChat.IServiceChat {
        
        public ServiceChatClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ServiceChatClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ServiceChatClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceChatClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceChatClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void Connect(int id, string name) {
            base.Channel.Connect(id, name);
        }
        
        public System.Threading.Tasks.Task ConnectAsync(int id, string name) {
            return base.Channel.ConnectAsync(id, name);
        }
        
        public void Disconnect(int id) {
            base.Channel.Disconnect(id);
        }
        
        public System.Threading.Tasks.Task DisconnectAsync(int id) {
            return base.Channel.DisconnectAsync(id);
        }
        
        public string[] ListName() {
            return base.Channel.ListName();
        }
        
        public System.Threading.Tasks.Task<string[]> ListNameAsync() {
            return base.Channel.ListNameAsync();
        }
        
        public void SendMsg(byte[] encryptedData, int id) {
            base.Channel.SendMsg(encryptedData, id);
        }
        
        public System.Threading.Tasks.Task SendMsgAsync(byte[] encryptedData, int id) {
            return base.Channel.SendMsgAsync(encryptedData, id);
        }
        
        public int Authentication(string name, byte[] encryptedPassword) {
            return base.Channel.Authentication(name, encryptedPassword);
        }
        
        public System.Threading.Tasks.Task<int> AuthenticationAsync(string name, byte[] encryptedPassword) {
            return base.Channel.AuthenticationAsync(name, encryptedPassword);
        }
        
        public byte[][] OldMessege() {
            return base.Channel.OldMessege();
        }
        
        public System.Threading.Tasks.Task<byte[][]> OldMessegeAsync() {
            return base.Channel.OldMessegeAsync();
        }
        
        public byte[] GetPublicKey() {
            return base.Channel.GetPublicKey();
        }
        
        public System.Threading.Tasks.Task<byte[]> GetPublicKeyAsync() {
            return base.Channel.GetPublicKeyAsync();
        }
        
        public byte[] GetPrivateKey() {
            return base.Channel.GetPrivateKey();
        }
        
        public System.Threading.Tasks.Task<byte[]> GetPrivateKeyAsync() {
            return base.Channel.GetPrivateKeyAsync();
        }
    }
}
